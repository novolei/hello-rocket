{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0","program":"C:\\Users\\aresray\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","aead","--edition=2018","C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","-C","metadata=2bb846de6ef0bf9a","-C","extra-filename=-2bb846de6ef0bf9a","--out-dir","f:\\Rust\\hello-rocket\\target\\rls\\debug\\deps","-L","dependency=f:\\Rust\\hello-rocket\\target\\rls\\debug\\deps","--extern","generic_array=f:\\Rust\\hello-rocket\\target\\rls\\debug\\deps\\libgeneric_array-aa702bfa13a7054a.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\aresray\\.rustup/toolchains/nightly-x86_64-pc-windows-msvc"],"output":"f:\\Rust\\hello-rocket\\target\\rls\\debug\\deps\\libaead-2bb846de6ef0bf9a.rmeta"},"prelude":{"crate_id":{"name":"aead","disambiguator":[3734209931406027236,15847034672012450870]},"crate_root":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src","external_crates":[{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[13611023294341355437,10043691270023661894]}},{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[7491082891882765782,16585286864171082077]}},{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[13475896778791491548,12248248351844131012]}},{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","num":4,"id":{"name":"alloc","disambiguator":[13975790540385655660,15976512376253938233]}},{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","num":5,"id":{"name":"generic_array","disambiguator":[14400354196254568970,14876069220641822211]}},{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","num":6,"id":{"name":"typenum","disambiguator":[8086296164313996436,631848053552025145]}}],"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":0,"byte_end":16209,"line_start":1,"line_end":433,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":5,"index":0},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":827,"byte_end":840,"line_start":20,"line_end":20,"column_start":9,"column_end":22},"alias_span":null,"name":"generic_array","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":0,"byte_end":16209,"line_start":1,"line_end":433,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":87},{"krate":0,"index":105},{"krate":0,"index":104},{"krate":0,"index":102},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":96},{"krate":0,"index":94},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":89},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":33},{"krate":0,"index":51},{"krate":0,"index":70},{"krate":0,"index":75},{"krate":0,"index":79},{"krate":0,"index":84}],"decl_id":null,"docs":" Authenticated Encryption with Associated Data (AEAD) traits","sig":null,"attributes":[{"value":"/ Authenticated Encryption with Associated Data (AEAD) traits","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":0,"byte_end":63,"line_start":1,"line_end":1,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":64,"byte_end":67,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides an abstract interface for AEAD ciphers, which guarantee","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":68,"byte_end":147,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/ both confidentiality and integrity, even from a powerful attacker who is","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":148,"byte_end":224,"line_start":4,"line_end":4,"column_start":1,"column_end":77}},{"value":"/ able to execute [chosen-ciphertext attacks]. The resulting security property,","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":225,"byte_end":306,"line_start":5,"line_end":5,"column_start":1,"column_end":82}},{"value":"/ [ciphertext indistinguishability], is considered a basic requirement for","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":307,"byte_end":383,"line_start":6,"line_end":6,"column_start":1,"column_end":77}},{"value":"/ modern cryptographic implementations.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":384,"byte_end":425,"line_start":7,"line_end":7,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":426,"byte_end":429,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [RustCrypto/AEADs] for cipher implementations which use this trait.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":430,"byte_end":505,"line_start":9,"line_end":9,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":506,"byte_end":509,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [chosen-ciphertext attacks]: https://en.wikipedia.org/wiki/Chosen-ciphertext_attack","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":510,"byte_end":597,"line_start":11,"line_end":11,"column_start":1,"column_end":88}},{"value":"/ [ciphertext indistinguishability]: https://en.wikipedia.org/wiki/Ciphertext_indistinguishability","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":598,"byte_end":698,"line_start":12,"line_end":12,"column_start":1,"column_end":101}},{"value":"/ [RustCrypto/AEADs]: https://github.com/RustCrypto/AEADs","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":699,"byte_end":758,"line_start":13,"line_end":13,"column_start":1,"column_end":60}},{"value":"no_std","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":760,"byte_end":770,"line_start":15,"line_end":15,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":1084,"byte_end":1089,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"Error","qualname":"::Error","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":12},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":1938,"byte_end":1945,"line_start":51,"line_end":51,"column_start":11,"column_end":18},"name":"NewAead","qualname":"::NewAead","value":"NewAead","parent":null,"children":[{"krate":0,"index":13},{"krate":0,"index":14}],"decl_id":null,"docs":" Instantiate either a stateless [`Aead`] or stateful [`AeadMut`] algorithm.\n","sig":null,"attributes":[{"value":"/ Instantiate either a stateless [`Aead`] or stateful [`AeadMut`] algorithm.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":1849,"byte_end":1927,"line_start":50,"line_end":50,"column_start":1,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":2019,"byte_end":2026,"line_start":53,"line_end":53,"column_start":10,"column_end":17},"name":"KeySize","qualname":"::NewAead::KeySize","value":"type KeySize: ArrayLength<u8>;","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" The size of the key array required by this algorithm.\n","sig":null,"attributes":[{"value":"/ The size of the key array required by this algorithm.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":1952,"byte_end":2009,"line_start":52,"line_end":52,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":2114,"byte_end":2117,"line_start":56,"line_end":56,"column_start":8,"column_end":11},"name":"new","qualname":"::NewAead::new","value":"pub fn new(GenericArray<u8, Self::KeySize>) -> Self","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Construct a new stateful instance for the given key.\n","sig":null,"attributes":[{"value":"/ Construct a new stateful instance for the given key.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":2050,"byte_end":2106,"line_start":55,"line_end":55,"column_start":5,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":15},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":2374,"byte_end":2378,"line_start":63,"line_end":63,"column_start":11,"column_end":15},"name":"Aead","qualname":"::Aead","value":"Aead","parent":null,"children":[{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":23},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":30},{"krate":0,"index":32}],"decl_id":null,"docs":" Authenticated Encryption with Associated Data (AEAD) algorithm.","sig":null,"attributes":[{"value":"/ Authenticated Encryption with Associated Data (AEAD) algorithm.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":2168,"byte_end":2235,"line_start":59,"line_end":59,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":2236,"byte_end":2239,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ This trait is intended for use with stateless AEAD algorithms. The","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":2240,"byte_end":2310,"line_start":61,"line_end":61,"column_start":1,"column_end":71}},{"value":"/ [`AeadMut`] trait provides a stateful interface.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":2311,"byte_end":2363,"line_start":62,"line_end":62,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":16},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":2421,"byte_end":2430,"line_start":65,"line_end":65,"column_start":10,"column_end":19},"name":"NonceSize","qualname":"::Aead::NonceSize","value":"type NonceSize: ArrayLength<u8>;","parent":{"krate":0,"index":15},"children":[],"decl_id":null,"docs":" The length of a nonce.\n","sig":null,"attributes":[{"value":"/ The length of a nonce.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":2385,"byte_end":2411,"line_start":64,"line_end":64,"column_start":5,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":17},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":2499,"byte_end":2506,"line_start":67,"line_end":67,"column_start":10,"column_end":17},"name":"TagSize","qualname":"::Aead::TagSize","value":"type TagSize: ArrayLength<u8>;","parent":{"krate":0,"index":15},"children":[],"decl_id":null,"docs":" The maximum length of the nonce.\n","sig":null,"attributes":[{"value":"/ The maximum length of the nonce.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":2453,"byte_end":2489,"line_start":66,"line_end":66,"column_start":5,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":2643,"byte_end":2661,"line_start":70,"line_end":70,"column_start":10,"column_end":28},"name":"CiphertextOverhead","qualname":"::Aead::CiphertextOverhead","value":"type CiphertextOverhead: ArrayLength<u8> + Unsigned;","parent":{"krate":0,"index":15},"children":[],"decl_id":null,"docs":" The upper bound amount of additional space required to support a\n ciphertext vs. a plaintext.\n","sig":null,"attributes":[{"value":"/ The upper bound amount of additional space required to support a","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":2529,"byte_end":2597,"line_start":68,"line_end":68,"column_start":5,"column_end":73}},{"value":"/ ciphertext vs. a plaintext.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":2602,"byte_end":2633,"line_start":69,"line_end":69,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":3915,"byte_end":3922,"line_start":96,"line_end":96,"column_start":8,"column_end":15},"name":"encrypt","qualname":"::Aead::encrypt","value":"pub fn encrypt<'msg, 'aad,\n               impl Into<Payload<'msg, 'aad>>: Into<Payload>>(&Self,\n                                                              &GenericArray<u8,\n                                                                            Self::NonceSize>,\n                                                              impl Into<Payload<'msg, 'aad>>)\n-> Result<Vec<u8>, Error>","parent":{"krate":0,"index":15},"children":[],"decl_id":null,"docs":" Encrypt the given plaintext payload, and return the resulting\n ciphertext as a vector of bytes.","sig":null,"attributes":[{"value":"/ Encrypt the given plaintext payload, and return the resulting","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":2696,"byte_end":2761,"line_start":72,"line_end":72,"column_start":5,"column_end":70}},{"value":"/ ciphertext as a vector of bytes.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":2766,"byte_end":2802,"line_start":73,"line_end":73,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":2807,"byte_end":2810,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ The [`Payload`] type can be used to provide Additional Associated Data","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":2815,"byte_end":2889,"line_start":75,"line_end":75,"column_start":5,"column_end":79}},{"value":"/ (AAD) along with the message: this is an optional bytestring which is","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":2894,"byte_end":2967,"line_start":76,"line_end":76,"column_start":5,"column_end":78}},{"value":"/ not encrypted, but *is* authenticated along with the message. Failure","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":2972,"byte_end":3045,"line_start":77,"line_end":77,"column_start":5,"column_end":78}},{"value":"/ to pass the same AAD that was used during encryption will cause","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":3050,"byte_end":3117,"line_start":78,"line_end":78,"column_start":5,"column_end":72}},{"value":"/ decryption to fail, which is useful if you would like to \"bind\" the","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":3122,"byte_end":3193,"line_start":79,"line_end":79,"column_start":5,"column_end":76}},{"value":"/ ciphertext to some other identifier, like a digital signature key","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":3198,"byte_end":3267,"line_start":80,"line_end":80,"column_start":5,"column_end":74}},{"value":"/ or other identifier.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":3272,"byte_end":3296,"line_start":81,"line_end":81,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":3301,"byte_end":3304,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ If you don't care about AAD and just want to encrypt a plaintext","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":3309,"byte_end":3377,"line_start":83,"line_end":83,"column_start":5,"column_end":73}},{"value":"/ message, `&[u8]` will automatically be coerced into a `Payload`:","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":3382,"byte_end":3450,"line_start":84,"line_end":84,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":3455,"byte_end":3458,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ ```nobuild","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":3463,"byte_end":3477,"line_start":86,"line_end":86,"column_start":5,"column_end":19}},{"value":"/ let plaintext = b\"Top secret message, handle with care\";","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":3482,"byte_end":3542,"line_start":87,"line_end":87,"column_start":5,"column_end":65}},{"value":"/ let ciphertext = cipher.encrypt(nonce, plaintext);","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":3547,"byte_end":3601,"line_start":88,"line_end":88,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":3606,"byte_end":3613,"line_start":89,"line_end":89,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":3618,"byte_end":3621,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ The default implementation assumes a postfix tag (ala AES-GCM,","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":3626,"byte_end":3692,"line_start":91,"line_end":91,"column_start":5,"column_end":71}},{"value":"/ AES-GCM-SIV, ChaCha20Poly1305). [`Aead`] implementations which do not","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":3697,"byte_end":3770,"line_start":92,"line_end":92,"column_start":5,"column_end":78}},{"value":"/ use a postfix tag will need to override this to correctly assemble the","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":3775,"byte_end":3849,"line_start":93,"line_end":93,"column_start":5,"column_end":79}},{"value":"/ ciphertext message.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":3854,"byte_end":3877,"line_start":94,"line_end":94,"column_start":5,"column_end":28}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":3882,"byte_end":3907,"line_start":95,"line_end":95,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":4834,"byte_end":4850,"line_start":117,"line_end":117,"column_start":8,"column_end":24},"name":"encrypt_in_place","qualname":"::Aead::encrypt_in_place","value":"pub fn encrypt_in_place<impl Buffer: Buffer>(&Self,\n                                             &GenericArray<u8,\n                                                           Self::NonceSize>,\n                                             &[u8], &mut impl Buffer)\n-> Result<(), Error>","parent":{"krate":0,"index":15},"children":[],"decl_id":null,"docs":" Encrypt the given buffer containing a plaintext message in-place.","sig":null,"attributes":[{"value":"/ Encrypt the given buffer containing a plaintext message in-place.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":4361,"byte_end":4430,"line_start":108,"line_end":108,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":4435,"byte_end":4438,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ The buffer must have sufficient capacity to store the ciphertext","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":4443,"byte_end":4511,"line_start":110,"line_end":110,"column_start":5,"column_end":73}},{"value":"/ message, which will always be larger than the original plaintext.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":4516,"byte_end":4585,"line_start":111,"line_end":111,"column_start":5,"column_end":74}},{"value":"/ The exact size needed is cipher-dependent, but generally includes","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":4590,"byte_end":4659,"line_start":112,"line_end":112,"column_start":5,"column_end":74}},{"value":"/ the size of an authentication tag.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":4664,"byte_end":4702,"line_start":113,"line_end":113,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":4707,"byte_end":4710,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the buffer has insufficient capacity to store the","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":4715,"byte_end":4788,"line_start":115,"line_end":115,"column_start":5,"column_end":78}},{"value":"/ resulting ciphertext message.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":4793,"byte_end":4826,"line_start":116,"line_end":116,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":5253,"byte_end":5278,"line_start":129,"line_end":129,"column_start":8,"column_end":33},"name":"encrypt_in_place_detached","qualname":"::Aead::encrypt_in_place_detached","value":"pub fn encrypt_in_place_detached(&Self, &GenericArray<u8, Self::NonceSize>,\n                                 &[u8], &mut [u8])\n-> Result<GenericArray<u8, Self::TagSize>, Error>","parent":{"krate":0,"index":15},"children":[],"decl_id":null,"docs":" Encrypt the data in-place, returning the authentication tag\n","sig":null,"attributes":[{"value":"/ Encrypt the data in-place, returning the authentication tag","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":5182,"byte_end":5245,"line_start":128,"line_end":128,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":6196,"byte_end":6203,"line_start":154,"line_end":154,"column_start":8,"column_end":15},"name":"decrypt","qualname":"::Aead::decrypt","value":"pub fn decrypt<'msg, 'aad,\n               impl Into<Payload<'msg, 'aad>>: Into<Payload>>(&Self,\n                                                              &GenericArray<u8,\n                                                                            Self::NonceSize>,\n                                                              impl Into<Payload<'msg, 'aad>>)\n-> Result<Vec<u8>, Error>","parent":{"krate":0,"index":15},"children":[],"decl_id":null,"docs":" Decrypt the given ciphertext slice, and return the resulting plaintext\n as a vector of bytes.","sig":null,"attributes":[{"value":"/ Decrypt the given ciphertext slice, and return the resulting plaintext","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":5467,"byte_end":5541,"line_start":136,"line_end":136,"column_start":5,"column_end":79}},{"value":"/ as a vector of bytes.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":5546,"byte_end":5571,"line_start":137,"line_end":137,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":5576,"byte_end":5579,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ See notes on [`Aead::encrypt()`] about allowable message payloads and","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":5584,"byte_end":5657,"line_start":139,"line_end":139,"column_start":5,"column_end":78}},{"value":"/ Associated Additional Data (AAD).","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":5662,"byte_end":5699,"line_start":140,"line_end":140,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":5704,"byte_end":5707,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ If you have no AAD, you can call this as follows:","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":5712,"byte_end":5765,"line_start":142,"line_end":142,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":5770,"byte_end":5773,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ ```nobuild","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":5778,"byte_end":5792,"line_start":144,"line_end":144,"column_start":5,"column_end":19}},{"value":"/ let ciphertext = b\"...\";","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":5797,"byte_end":5825,"line_start":145,"line_end":145,"column_start":5,"column_end":33}},{"value":"/ let plaintext = cipher.decrypt(nonce, ciphertext)?;","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":5830,"byte_end":5885,"line_start":146,"line_end":146,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":5890,"byte_end":5897,"line_start":147,"line_end":147,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":5902,"byte_end":5905,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ The default implementation assumes a postfix tag (ala AES-GCM,","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":5910,"byte_end":5976,"line_start":149,"line_end":149,"column_start":5,"column_end":71}},{"value":"/ AES-GCM-SIV, ChaCha20Poly1305). [`Aead`] implementations which do not","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":5981,"byte_end":6054,"line_start":150,"line_end":150,"column_start":5,"column_end":78}},{"value":"/ use a postfix tag will need to override this to correctly parse the","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":6059,"byte_end":6130,"line_start":151,"line_end":151,"column_start":5,"column_end":76}},{"value":"/ ciphertext message.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":6135,"byte_end":6158,"line_start":152,"line_end":152,"column_start":5,"column_end":28}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":6163,"byte_end":6188,"line_start":153,"line_end":153,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":6819,"byte_end":6835,"line_start":170,"line_end":170,"column_start":8,"column_end":24},"name":"decrypt_in_place","qualname":"::Aead::decrypt_in_place","value":"pub fn decrypt_in_place<impl Buffer: Buffer>(&Self,\n                                             &GenericArray<u8,\n                                                           Self::NonceSize>,\n                                             &[u8], &mut impl Buffer)\n-> Result<(), Error>","parent":{"krate":0,"index":15},"children":[],"decl_id":null,"docs":" Decrypt the message in-place, returning an error in the event the\n provided authentication tag does not match the given ciphertext.","sig":null,"attributes":[{"value":"/ Decrypt the message in-place, returning an error in the event the","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":6554,"byte_end":6623,"line_start":165,"line_end":165,"column_start":5,"column_end":74}},{"value":"/ provided authentication tag does not match the given ciphertext.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":6628,"byte_end":6696,"line_start":166,"line_end":166,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":6701,"byte_end":6704,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ The buffer will be truncated to the length of the original plaintext","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":6709,"byte_end":6781,"line_start":168,"line_end":168,"column_start":5,"column_end":77}},{"value":"/ message upon success.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":6786,"byte_end":6811,"line_start":169,"line_end":169,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":7277,"byte_end":7302,"line_start":182,"line_end":182,"column_start":8,"column_end":33},"name":"decrypt_in_place_detached","qualname":"::Aead::decrypt_in_place_detached","value":"pub fn decrypt_in_place_detached(&Self, &GenericArray<u8, Self::NonceSize>,\n                                 &[u8], &mut [u8],\n                                 &GenericArray<u8, Self::TagSize>)\n-> Result<(), Error>","parent":{"krate":0,"index":15},"children":[],"decl_id":null,"docs":" Decrypt the message in-place, returning an error in the event the provided\n authentication tag does not match the given ciphertext (i.e. ciphertext\n is modified/unauthentic)\n","sig":null,"attributes":[{"value":"/ Decrypt the message in-place, returning an error in the event the provided","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":7078,"byte_end":7156,"line_start":179,"line_end":179,"column_start":5,"column_end":83}},{"value":"/ authentication tag does not match the given ciphertext (i.e. ciphertext","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":7161,"byte_end":7236,"line_start":180,"line_end":180,"column_start":5,"column_end":80}},{"value":"/ is modified/unauthentic)","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":7241,"byte_end":7269,"line_start":181,"line_end":181,"column_start":5,"column_end":33}}]},{"kind":"Trait","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":7587,"byte_end":7594,"line_start":192,"line_end":192,"column_start":11,"column_end":18},"name":"AeadMut","qualname":"::AeadMut","value":"AeadMut","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":48},{"krate":0,"index":50}],"decl_id":null,"docs":" Stateful Authenticated Encryption with Associated Data algorithm.\n","sig":null,"attributes":[{"value":"/ Stateful Authenticated Encryption with Associated Data algorithm.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":7507,"byte_end":7576,"line_start":191,"line_end":191,"column_start":1,"column_end":70}}]},{"kind":"Type","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":7637,"byte_end":7646,"line_start":194,"line_end":194,"column_start":10,"column_end":19},"name":"NonceSize","qualname":"::AeadMut::NonceSize","value":"type NonceSize: ArrayLength<u8>;","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" The length of a nonce.\n","sig":null,"attributes":[{"value":"/ The length of a nonce.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":7601,"byte_end":7627,"line_start":193,"line_end":193,"column_start":5,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":7715,"byte_end":7722,"line_start":196,"line_end":196,"column_start":10,"column_end":17},"name":"TagSize","qualname":"::AeadMut::TagSize","value":"type TagSize: ArrayLength<u8>;","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" The maximum length of the nonce.\n","sig":null,"attributes":[{"value":"/ The maximum length of the nonce.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":7669,"byte_end":7705,"line_start":195,"line_end":195,"column_start":5,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":7859,"byte_end":7877,"line_start":199,"line_end":199,"column_start":10,"column_end":28},"name":"CiphertextOverhead","qualname":"::AeadMut::CiphertextOverhead","value":"type CiphertextOverhead: ArrayLength<u8> + Unsigned;","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" The upper bound amount of additional space required to support a\n ciphertext vs. a plaintext.\n","sig":null,"attributes":[{"value":"/ The upper bound amount of additional space required to support a","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":7745,"byte_end":7813,"line_start":197,"line_end":197,"column_start":5,"column_end":73}},{"value":"/ ciphertext vs. a plaintext.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":7818,"byte_end":7849,"line_start":198,"line_end":198,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":8182,"byte_end":8189,"line_start":207,"line_end":207,"column_start":8,"column_end":15},"name":"encrypt","qualname":"::AeadMut::encrypt","value":"pub fn encrypt<'msg, 'aad,\n               impl Into<Payload<'msg, 'aad>>: Into<Payload>>(&mut Self,\n                                                              &GenericArray<u8,\n                                                                            Self::NonceSize>,\n                                                              impl Into<Payload<'msg, 'aad>>)\n-> Result<Vec<u8>, Error>","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" Encrypt the given plaintext slice, and return the resulting ciphertext\n as a vector of bytes.","sig":null,"attributes":[{"value":"/ Encrypt the given plaintext slice, and return the resulting ciphertext","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":7912,"byte_end":7986,"line_start":201,"line_end":201,"column_start":5,"column_end":79}},{"value":"/ as a vector of bytes.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":7991,"byte_end":8016,"line_start":202,"line_end":202,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":8021,"byte_end":8024,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ See notes on [`Aead::encrypt()`] about allowable message payloads and","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":8029,"byte_end":8102,"line_start":204,"line_end":204,"column_start":5,"column_end":78}},{"value":"/ Associated Additional Data (AAD).","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":8107,"byte_end":8144,"line_start":205,"line_end":205,"column_start":5,"column_end":42}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":8149,"byte_end":8174,"line_start":206,"line_end":206,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":9105,"byte_end":9121,"line_start":228,"line_end":228,"column_start":8,"column_end":24},"name":"encrypt_in_place","qualname":"::AeadMut::encrypt_in_place","value":"pub fn encrypt_in_place<impl Buffer: Buffer>(&mut Self,\n                                             &GenericArray<u8,\n                                                           Self::NonceSize>,\n                                             &[u8], &mut impl Buffer)\n-> Result<(), Error>","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" Encrypt the given buffer containing a plaintext message in-place.","sig":null,"attributes":[{"value":"/ Encrypt the given buffer containing a plaintext message in-place.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":8632,"byte_end":8701,"line_start":219,"line_end":219,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":8706,"byte_end":8709,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ The buffer must have sufficient capacity to store the ciphertext","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":8714,"byte_end":8782,"line_start":221,"line_end":221,"column_start":5,"column_end":73}},{"value":"/ message, which will always be larger than the original plaintext.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":8787,"byte_end":8856,"line_start":222,"line_end":222,"column_start":5,"column_end":74}},{"value":"/ The exact size needed is cipher-dependent, but generally includes","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":8861,"byte_end":8930,"line_start":223,"line_end":223,"column_start":5,"column_end":74}},{"value":"/ the size of an authentication tag.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":8935,"byte_end":8973,"line_start":224,"line_end":224,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":8978,"byte_end":8981,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the buffer has insufficient capacity to store the","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":8986,"byte_end":9059,"line_start":226,"line_end":226,"column_start":5,"column_end":78}},{"value":"/ resulting ciphertext message.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":9064,"byte_end":9097,"line_start":227,"line_end":227,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":9528,"byte_end":9553,"line_start":240,"line_end":240,"column_start":8,"column_end":33},"name":"encrypt_in_place_detached","qualname":"::AeadMut::encrypt_in_place_detached","value":"pub fn encrypt_in_place_detached(&mut Self,\n                                 &GenericArray<u8, Self::NonceSize>, &[u8],\n                                 &mut [u8])\n-> Result<GenericArray<u8, Self::TagSize>, Error>","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" Encrypt the data in-place, returning the authentication tag\n","sig":null,"attributes":[{"value":"/ Encrypt the data in-place, returning the authentication tag","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":9457,"byte_end":9520,"line_start":239,"line_end":239,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":10040,"byte_end":10047,"line_start":253,"line_end":253,"column_start":8,"column_end":15},"name":"decrypt","qualname":"::AeadMut::decrypt","value":"pub fn decrypt<'msg, 'aad,\n               impl Into<Payload<'msg, 'aad>>: Into<Payload>>(&mut Self,\n                                                              &GenericArray<u8,\n                                                                            Self::NonceSize>,\n                                                              impl Into<Payload<'msg, 'aad>>)\n-> Result<Vec<u8>, Error>","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" Decrypt the given ciphertext slice, and return the resulting plaintext\n as a vector of bytes.","sig":null,"attributes":[{"value":"/ Decrypt the given ciphertext slice, and return the resulting plaintext","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":9746,"byte_end":9820,"line_start":247,"line_end":247,"column_start":5,"column_end":79}},{"value":"/ as a vector of bytes.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":9825,"byte_end":9850,"line_start":248,"line_end":248,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":9855,"byte_end":9858,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ See notes on [`Aead::encrypt()`] and [`Aead::decrypt()`] about allowable","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":9863,"byte_end":9939,"line_start":250,"line_end":250,"column_start":5,"column_end":81}},{"value":"/ message payloads and Associated Additional Data (AAD).","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":9944,"byte_end":10002,"line_start":251,"line_end":251,"column_start":5,"column_end":63}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":10007,"byte_end":10032,"line_start":252,"line_end":252,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":10667,"byte_end":10683,"line_start":269,"line_end":269,"column_start":8,"column_end":24},"name":"decrypt_in_place","qualname":"::AeadMut::decrypt_in_place","value":"pub fn decrypt_in_place<impl Buffer: Buffer>(&mut Self,\n                                             &GenericArray<u8,\n                                                           Self::NonceSize>,\n                                             &[u8], &mut impl Buffer)\n-> Result<(), Error>","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" Decrypt the message in-place, returning an error in the event the\n provided authentication tag does not match the given ciphertext.","sig":null,"attributes":[{"value":"/ Decrypt the message in-place, returning an error in the event the","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":10402,"byte_end":10471,"line_start":264,"line_end":264,"column_start":5,"column_end":74}},{"value":"/ provided authentication tag does not match the given ciphertext.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":10476,"byte_end":10544,"line_start":265,"line_end":265,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":10549,"byte_end":10552,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ The buffer will be truncated to the length of the original plaintext","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":10557,"byte_end":10629,"line_start":267,"line_end":267,"column_start":5,"column_end":77}},{"value":"/ message upon success.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":10634,"byte_end":10659,"line_start":268,"line_end":268,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":11126,"byte_end":11151,"line_start":281,"line_end":281,"column_start":8,"column_end":33},"name":"decrypt_in_place_detached","qualname":"::AeadMut::decrypt_in_place_detached","value":"pub fn decrypt_in_place_detached(&mut Self,\n                                 &GenericArray<u8, Self::NonceSize>, &[u8],\n                                 &mut [u8], &GenericArray<u8, Self::TagSize>)\n-> Result<(), Error>","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" Decrypt the data in-place, returning an error in the event the provided\n authentication tag does not match the given ciphertext (i.e. ciphertext\n is modified/unauthentic)\n","sig":null,"attributes":[{"value":"/ Decrypt the data in-place, returning an error in the event the provided","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":10930,"byte_end":11005,"line_start":278,"line_end":278,"column_start":5,"column_end":80}},{"value":"/ authentication tag does not match the given ciphertext (i.e. ciphertext","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":11010,"byte_end":11085,"line_start":279,"line_end":279,"column_start":5,"column_end":80}},{"value":"/ is modified/unauthentic)","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":11090,"byte_end":11118,"line_start":280,"line_end":280,"column_start":5,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":14433,"byte_end":14440,"line_start":370,"line_end":370,"column_start":12,"column_end":19},"name":"Payload","qualname":"::Payload","value":"Payload { msg, aad }","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74}],"decl_id":null,"docs":" AEAD payloads are a combination of a message (plaintext or ciphertext)\n and \"additional associated data\" (AAD) to be authenticated (in cleartext)\n along with the message.","sig":null,"attributes":[{"value":"/ AEAD payloads are a combination of a message (plaintext or ciphertext)","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":14088,"byte_end":14162,"line_start":364,"line_end":364,"column_start":1,"column_end":75}},{"value":"/ and \"additional associated data\" (AAD) to be authenticated (in cleartext)","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":14163,"byte_end":14240,"line_start":365,"line_end":365,"column_start":1,"column_end":78}},{"value":"/ along with the message.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":14241,"byte_end":14268,"line_start":366,"line_end":366,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":14269,"byte_end":14272,"line_start":367,"line_end":367,"column_start":1,"column_end":4}},{"value":"/ If you don't care about AAD, you can pass a `&[u8]` as the payload to","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":14273,"byte_end":14346,"line_start":368,"line_end":368,"column_start":1,"column_end":74}},{"value":"/ `encrypt`/`decrypt` and it will automatically be coerced to this type.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":14347,"byte_end":14421,"line_start":369,"line_end":369,"column_start":1,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":14505,"byte_end":14508,"line_start":372,"line_end":372,"column_start":9,"column_end":12},"name":"msg","qualname":"::Payload::msg","value":"&'msg [u8]","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":" Message to be encrypted/decrypted\n","sig":null,"attributes":[{"value":"/ Message to be encrypted/decrypted","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":14459,"byte_end":14496,"line_start":371,"line_end":371,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":14794,"byte_end":14797,"line_start":378,"line_end":378,"column_start":9,"column_end":12},"name":"aad","qualname":"::Payload::aad","value":"&'aad [u8]","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":" Optional \"additional associated data\" to authenticate along with\n this message. If AAD is provided at the time the message is encrypted,\n the same AAD *MUST* be provided at the time the message is decrypted,\n or decryption will fail.\n","sig":null,"attributes":[{"value":"/ Optional \"additional associated data\" to authenticate along with","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":14527,"byte_end":14595,"line_start":374,"line_end":374,"column_start":5,"column_end":73}},{"value":"/ this message. If AAD is provided at the time the message is encrypted,","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":14600,"byte_end":14674,"line_start":375,"line_end":375,"column_start":5,"column_end":79}},{"value":"/ the same AAD *MUST* be provided at the time the message is decrypted,","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":14679,"byte_end":14752,"line_start":376,"line_end":376,"column_start":5,"column_end":78}},{"value":"/ or decryption will fail.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":14757,"byte_end":14785,"line_start":377,"line_end":377,"column_start":5,"column_end":33}}]},{"kind":"Trait","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":15127,"byte_end":15133,"line_start":391,"line_end":391,"column_start":11,"column_end":17},"name":"Buffer","qualname":"::Buffer","value":"Buffer: AsRef<[u8]> + AsMut<[u8]>","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83}],"decl_id":null,"docs":" In-place encryption/decryption byte buffers.","sig":null,"attributes":[{"value":"/ In-place encryption/decryption byte buffers.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":14953,"byte_end":15001,"line_start":387,"line_end":387,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":15002,"byte_end":15005,"line_start":388,"line_end":388,"column_start":1,"column_end":4}},{"value":"/ This trait defines the set of methods needed to support in-place operations","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":15006,"byte_end":15085,"line_start":389,"line_end":389,"column_start":1,"column_end":80}},{"value":"/ on a `Vec`-like data type.","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":15086,"byte_end":15116,"line_start":390,"line_end":390,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":15207,"byte_end":15210,"line_start":393,"line_end":393,"column_start":8,"column_end":11},"name":"len","qualname":"::Buffer::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":" Get the length of the buffer\n","sig":null,"attributes":[{"value":"/ Get the length of the buffer","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":15167,"byte_end":15199,"line_start":392,"line_end":392,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":15300,"byte_end":15308,"line_start":398,"line_end":398,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::Buffer::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":" Is the buffer empty?\n","sig":null,"attributes":[{"value":"/ Is the buffer empty?","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":15268,"byte_end":15292,"line_start":397,"line_end":397,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":15421,"byte_end":15438,"line_start":403,"line_end":403,"column_start":8,"column_end":25},"name":"extend_from_slice","qualname":"::Buffer::extend_from_slice","value":"pub fn extend_from_slice(&mut Self, &[u8]) -> Result<(), Error>","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":" Extend this buffer from the given slice\n","sig":null,"attributes":[{"value":"/ Extend this buffer from the given slice","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":15370,"byte_end":15413,"line_start":402,"line_end":402,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":15541,"byte_end":15549,"line_start":406,"line_end":406,"column_start":8,"column_end":16},"name":"truncate","qualname":"::Buffer::truncate","value":"pub fn truncate(&mut Self, usize)","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":" Truncate this buffer to the given size\n","sig":null,"attributes":[{"value":"/ Truncate this buffer to the given size","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":15491,"byte_end":15533,"line_start":405,"line_end":405,"column_start":5,"column_end":47}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":11489,"byte_end":11493,"line_start":292,"line_end":292,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":67},{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":14852,"byte_end":14859,"line_start":381,"line_end":381,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":15619,"byte_end":15622,"line_start":410,"line_end":410,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":11489,"byte_end":11493,"line_start":292,"line_end":292,"column_start":30,"column_end":34},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":52},"to":{"krate":0,"index":33}},{"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":14852,"byte_end":14859,"line_start":381,"line_end":381,"column_start":39,"column_end":46},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":70},"to":{"krate":1,"index":1967}},{"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":15135,"byte_end":15140,"line_start":391,"line_end":391,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":1958},"to":{"krate":0,"index":79}},{"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":15149,"byte_end":15154,"line_start":391,"line_end":391,"column_start":33,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":1961},"to":{"krate":0,"index":79}},{"span":{"file_name":"C:\\Users\\aresray\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\aead-0.2.0\\src\\lib.rs","byte_start":15619,"byte_end":15622,"line_start":410,"line_end":410,"column_start":17,"column_end":20},"kind":{"Impl":{"id":2}},"from":{"krate":4,"index":4844},"to":{"krate":0,"index":79}}]}